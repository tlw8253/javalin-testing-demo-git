<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.demo.javalin</groupId>
  <artifactId>javalin-testing-demo</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  
  	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	</properties>

	<dependencies>
  
  		<!-- https://mvnrepository.com/artifact/junit/junit -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.2</version>
			<scope>test</scope>
		</dependency>

		<!-- dependency definitions from logging-demo -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.2.4</version>
		</dependency>

		<!--Using this definition works best. Javalin still logs and this program 
			has control over logging level. Downside is turning on levels lower that 
			INFO also turns on Javalin lower level debugging. Log4j allow for turning 
			off logging at class or program level so there should be a way to turn Javalin 
			off. -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.32</version>
		</dependency>



		<!-- Javalin and its dependencies [slf4j, jackson] -->
		<!-- Javalin https://javalin.io -->
		<dependency>
			<groupId>io.javalin</groupId>
			<artifactId>javalin</artifactId>
			<version>3.13.10</version>
		</dependency>
  
  		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.10.5</version>
		</dependency>

		<!-- The following dependency are from Javalin page on test tutorial https://javalin.io/tutorials/testing 
			Code example taken from GIT Clone of https://github.com/tipsy/javalin-testing-example.git 
			Source code from example where modified for this project -->
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<version>3.11.1</version>
			<scope>test</scope>
		</dependency>


		<!-- Unit Testing -->
		<dependency>
			<groupId>io.mockk</groupId>
			<artifactId>mockk</artifactId>
			<version>1.9.3</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>3.2.4</version>
			<scope>test</scope>
		</dependency>

		<!-- Functional Testing -->
		<dependency>
			<groupId>com.konghq</groupId>
			<artifactId>unirest-java</artifactId>
			<version>3.4.00</version>
			<scope>test</scope>
		</dependency>

		<!-- End to end testing -->
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-chrome-driver</artifactId>
			<version>3.141.59</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.github.bonigarcia</groupId>
			<artifactId>webdrivermanager</artifactId>
			<version>3.6.2</version>
			<scope>test</scope>
		</dependency>

  
  
  
  
  	</dependencies>


	<!-- build instruction to use from Git Bash command line:
			mvn test
			mvn compile
			mvn package
			
			to run the jar file
			java -jar filename.jar
	 -->
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<archive>
								<manifest>
									<mainClass>
										com.javalin.demo.Main
									</mainClass>
								</manifest>
							</archive>
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
  
  
  
</project>